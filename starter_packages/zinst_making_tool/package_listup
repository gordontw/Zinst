#!/bin/bash
BaseRoot=`cat /usr/bin/zinst |grep "^ZinstBaseRoot=" | awk -F'=' '{print $2}' | sed -s 's/"//g'`
DistDir=$BaseRoot/dist

cd $DistDir
List=`ls -l |egrep "\.zinst" |awk '{print $9}'`
Listup=`echo $List`
ListupNum=`echo $Listup | awk '{print NF}'`


echo "======================================================"
echo " Package information creating..."
echo " Please hold a sec."
echo "======================================================"

echo "Latest update = `date +%Y.%m.%d` `date +[%T]`" > $DistDir/checker/package_dist_list.info

	Count=1
	while [ $Count -le $ListupNum ]
	do
		PackageP=`echo $Listup | awk '{print $'$Count'}'`	
		Pack_name=`echo $PackageP | awk -F '-' '{print $1}'`	


		tar zxfp $PackageP $Pack_name.zicf


		### Find Package name
		head -14 $Pack_name.zicf |sed -e 's/ = /=/g' > $DistDir/checker/package_dist_listing
    
		### Fetch a dependecy file list
		CheckRequireRaw=`cat $Pack_name.zicf |grep "^ZINST requires pkg "| awk '{print $4}'`
		CheckRequire=`echo $CheckRequireRaw`
    
		### Move a zicf file to Dist dir
		mv $Pack_name.zicf $DistDir/checker/
    
		### Parse a Key value for the Dist
		echo "echo \"| \$PACKAGENAME | \$VERSION | \$AUTHORIZED | \$CUSTODIAN | \$DESCRIPTION | $CheckRequire |@ \" " >> $DistDir/checker/package_dist_listing;
		sed -i "/^FILE/d" $DistDir/checker/package_dist_listing
		sed -i "/^CONF/d" $DistDir/checker/package_dist_listing
		sed -i "/^SYMB/d" $DistDir/checker/package_dist_listing
		sed -i "/^CRON/d" $DistDir/checker/package_dist_listing
		sed -i "/^COMM/d" $DistDir/checker/package_dist_listing

		chmod 755 $DistDir/checker/package_dist_listing;
		ExistPkg=`sh $DistDir/checker/package_dist_listing | awk '{print $2}'`
    
		### Package maintenance list create
		sed -i "/^| $ExistPkg/d" $DistDir/checker/package_dist_list.info
		#sh $DistDir/checker/package_dist_listing 
		sh $DistDir/checker/package_dist_listing >> $DistDir/checker/package_dist_list.info
		rm -f $DistDir/checker/package_dist_listing

	WatchC=`echo $Count |grep "0"`
	if [[ $WatchC != "" ]]
	then
		echo "======================================================"
		echo " $Count Package done "
		echo "======================================================"
	fi

	let Count=Count+1
	done

echo " "
echo " "
echo "======================================================"
echo " $ListupNum Package(s) Information had been created"
echo "======================================================"
